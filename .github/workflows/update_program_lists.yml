name: Update program lists

on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.0.1)'
        required: true
        default: '2.0.1'

env:
  CARGO_TERM_COLOR: always
  APP_VERSION: ${{ github.event.inputs.version }}

jobs:
  sort_json:
    runs-on: ubuntu-latest
    name: Sorting json
    permissions: write-all
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Sort JSON files by program field
      run: |
        sudo apt-get -y install jq
        
        JSON_FILES=("database/linux_database.json" "database/windows_database.json")
        for JSON_FILE in "${JSON_FILES[@]}"; do
          echo "Processing $JSON_FILE..."
          
          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: JSON file not found at $JSON_FILE"
            exit 1
          fi
          
          jq 'sort_by(.program | ascii_downcase)' "$JSON_FILE" > "${JSON_FILE}.tmp"
          
          if [ $? -eq 0 ]; then
            mv "${JSON_FILE}.tmp" "$JSON_FILE"
            echo "Successfully sorted $JSON_FILE"
          else
            echo "Error: Failed to sort $JSON_FILE"
            exit 1
          fi
        done
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add "${JSON_FILES[@]}"
        git commit -m "Auto-sorted JSON files by program field" || echo "No changes to commit"
        git push || echo "No changes to push"

  generate-lists:
    runs-on: ubuntu-latest
    name: Generating clearing programs list
    needs: [sort_json]
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get -y install jq

    - name: Process Windows data
      run: |
        # Load program links into a variable
        if [ -f "database/program_links.json" ]; then
          program_links=$(jq -r '.' database/program_links.json)
        else
          program_links="{}"
        fi

        # Header
        echo "# Windows Clearing Programs Catalog v${{ env.APP_VERSION }}" > LIST_WINDOWS.md
        total_categories=$(jq -r 'map(.category) | unique | length' database/windows_database.json)
        total_programs=$(jq -r 'map(.program) | unique | length' database/windows_database.json)
        total_pathes=$(jq -r 'map(.path) | unique | length' database/windows_database.json)
        echo -e "**Total categories in database:** $total_categories\n" >> LIST_WINDOWS.md
        echo -e "**Total programs in database:** $total_programs\n" >> LIST_WINDOWS.md
        echo -e "**Total pathes in database:** $total_pathes\n" >> LIST_WINDOWS.md
        
        jq -r 'map(.class) | unique | map(select(. != null)) | .[]' database/windows_database.json | while IFS= read -r class; do
          echo -e "## $class\n" >> LIST_WINDOWS.md
          
          # Get programs for this class
          programs=$(jq -c --arg class "$class" 'group_by(.program)[] | select(.[0].program != null and .[0].class == $class)' database/windows_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_WINDOWS.md
            echo "| --- | --- | --- |" >> LIST_WINDOWS.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              # Check if program has a link
              program_link=$(echo "$program_links" | jq -r --arg program "$program" '.[$program] // empty')
              if [ -n "$program_link" ]; then
                displayed_program="[$program]($program_link)"
              else
                displayed_program="$program"
              fi
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $displayed_program | $categories |" >> LIST_WINDOWS.md
            done <<< "$programs"
          else
            echo "*No programs found for this class*" >> LIST_WINDOWS.md
          fi
          
          echo -e "\n" >> LIST_WINDOWS.md
        done

        # Handle null class separately if needed
        if jq -e '.[] | select(.class == null)' database/windows_database.json >/dev/null; then
          echo -e "## Uncategorized\n" >> LIST_WINDOWS.md
          programs=$(jq -c 'group_by(.program)[] | select(.[0].program != null and .[0].class == null)' database/windows_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_WINDOWS.md
            echo "| --- | --- | --- |" >> LIST_WINDOWS.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              # Check if program has a link
              program_link=$(echo "$program_links" | jq -r --arg program "$program" '.[$program] // empty')
              if [ -n "$program_link" ]; then
                displayed_program="[$program]($program_link)"
              else
                displayed_program="$program"
              fi
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $displayed_program | $categories |" >> LIST_WINDOWS.md
            done <<< "$programs"
          else
            echo "*No uncategorized programs found*" >> LIST_WINDOWS.md
          fi
        fi

    - name: Process Linux data
      run: |
        # Load program links into a variable
        if [ -f "database/program_links.json" ]; then
          program_links=$(jq -r '.' database/program_links.json)
        else
          program_links="{}"
        fi

        # Header
        echo "# Linux Clearing Programs Catalog v${{ env.APP_VERSION }}" > LIST_LINUX.md
        total_categories=$(jq -r 'map(.category) | unique | length' database/linux_database.json)
        total_programs=$(jq -r 'map(.program) | unique | length' database/linux_database.json)
        total_pathes=$(jq -r 'map(.path) | unique | length' database/linux_database.json)
        echo -e "**Total categories in database:** $total_categories\n" >> LIST_LINUX.md
        echo -e "**Total programs in database:** $total_programs\n" >> LIST_LINUX.md
        echo -e "**Total pathes in database:** $total_pathes\n" >> LIST_LINUX.md
        
        jq -r 'map(.class) | unique | map(select(. != null)) | .[]' database/linux_database.json | while IFS= read -r class; do
          echo -e "## $class\n" >> LIST_LINUX.md
          
          # Get programs for this class
          programs=$(jq -c --arg class "$class" 'group_by(.program)[] | select(.[0].program != null and .[0].class == $class)' database/linux_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_LINUX.md
            echo "| --- | --- | --- |" >> LIST_LINUX.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              # Check if program has a link
              program_link=$(echo "$program_links" | jq -r --arg program "$program" '.[$program] // empty')
              if [ -n "$program_link" ]; then
                displayed_program="[$program]($program_link)"
              else
                displayed_program="$program"
              fi
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $displayed_program | $categories |" >> LIST_LINUX.md
            done <<< "$programs"
          else
            echo "*No programs found for this class*" >> LIST_LINUX.md
          fi
          
          echo -e "\n" >> LIST_LINUX.md
        done

        # Handle null class separately if needed
        if jq -e '.[] | select(.class == null)' database/linux_database.json >/dev/null; then
          echo -e "## Uncategorized\n" >> LIST_LINUX.md
          programs=$(jq -c 'group_by(.program)[] | select(.[0].program != null and .[0].class == null)' database/linux_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_LINUX.md
            echo "| --- | --- | --- |" >> LIST_LINUX.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              # Check if program has a link
              program_link=$(echo "$program_links" | jq -r --arg program "$program" '.[$program] // empty')
              if [ -n "$program_link" ]; then
                displayed_program="[$program]($program_link)"
              else
                displayed_program="$program"
              fi
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $displayed_program | $categories |" >> LIST_LINUX.md
            done <<< "$programs"
          else
            echo "*No uncategorized programs found*" >> LIST_LINUX.md
          fi
        fi
          
    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add LIST_*.md
        git commit -m "Auto-updated program catalogs" || echo "No changes to commit"
        git push || echo "No changes to push"
