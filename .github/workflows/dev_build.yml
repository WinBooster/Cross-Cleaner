name: Development Build and Formating

on:
  workflow_dispatch:
  workflow_call:
  push:
    paths:
      - '**/*.toml'
      - '**/*.rs'
      - '**/*.json'
      - '.github/workflows/**' 
  pull_request:
    paths:
      - '**/*.toml'
      - '**/*.rs'
      - '**/*.json'
      - '.github/workflows/**' 

env:
  CARGO_TERM_COLOR: always
  APP_VERSION: "2.0.1"

jobs:
  formating_code:
    runs-on: ubuntu-latest
    permissions: write-all
    name: Formating code
    steps:
    - uses: actions/checkout@v4
    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = .*/version = "${{ env.APP_VERSION }}"/' Cargo.toml
        sed -i 's/ProductVersion = .*/ProductVersion = "${{ env.APP_VERSION }}"/' Cargo.toml
    - name: Formating code
      run: cargo fmt
    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "Auto format code" || echo "No changes to commit"
        git push || echo "No changes to push"

  sort_json:
    runs-on: ubuntu-latest
    name: Sorting json
    permissions: write-all
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Sort JSON files by program field
      run: |
        sudo apt-get -y install jq
        
        JSON_FILES=("database/linux_database.json" "database/windows_database.json")
        for JSON_FILE in "${JSON_FILES[@]}"; do
          echo "Processing $JSON_FILE..."
          
          # Проверяем, существует ли файл
          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: JSON file not found at $JSON_FILE"
            exit 1
          fi
          
          jq 'sort_by(.program | ascii_downcase)' "$JSON_FILE" > "${JSON_FILE}.tmp"
          
          if [ $? -eq 0 ]; then
            mv "${JSON_FILE}.tmp" "$JSON_FILE"
            echo "Successfully sorted $JSON_FILE"
          else
            echo "Error: Failed to sort $JSON_FILE"
            exit 1
          fi
        done
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add "${JSON_FILES[@]}"
        git commit -m "Auto-sorted JSON files by program field" || echo "No changes to commit"
        git push || echo "No changes to push"

  generate-lists:
    runs-on: ubuntu-latest
    name: Generating clearing programs list
    needs: [sort_json]
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get -y install jq

    - name: Process Windows data
      run: |
        # Header
        echo "# Windows Clearing Programs Catalog" > LIST_WINDOWS.md
        total_programs=$(jq -r 'map(.program) | unique | length' database/windows_database.json)
        total_pathes=$(jq -r 'map(.path) | unique | length' database/windows_database.json)
        echo -e "**Total programs in database:** $total_programs\n" >> LIST_WINDOWS.md
        echo "**Total pathes in database:** $total_pathes" >> LIST_WINDOWS.md
        
        jq -r 'map(.class) | unique | map(select(. != null)) | .[]' database/windows_database.json | while IFS= read -r class; do
          echo -e "## $class\n" >> LIST_WINDOWS.md
          
          # Get programs for this class
          programs=$(jq -c --arg class "$class" 'group_by(.program)[] | select(.[0].program != null and .[0].class == $class)' database/windows_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_WINDOWS.md
            echo "| --- | --- | --- |" >> LIST_WINDOWS.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $program | $categories |" >> LIST_WINDOWS.md
            done <<< "$programs"
          else
            echo "*No programs found for this class*" >> LIST_WINDOWS.md
          fi
          
          echo -e "\n" >> LIST_WINDOWS.md
        done

        # Handle null class separately if needed
        if jq -e '.[] | select(.class == null)' database/windows_database.json >/dev/null; then
          echo -e "## Uncategorized\n" >> LIST_WINDOWS.md
          programs=$(jq -c 'group_by(.program)[] | select(.[0].program != null and .[0].class == null)' database/windows_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_WINDOWS.md
            echo "| --- | --- | --- |" >> LIST_WINDOWS.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $program | $categories |" >> LIST_WINDOWS.md
            done <<< "$programs"
          else
            echo "*No uncategorized programs found*" >> LIST_WINDOWS.md
          fi
        fi

    - name: Process Linux data
      run: |
        # Header
        echo "# Linux Clearing Programs Catalog" > LIST_LINUX.md
        total_programs=$(jq -r 'map(.program) | unique | length' database/linux_database.json)
        total_pathes=$(jq -r 'map(.path) | unique | length' database/linux_database.json)
        echo -e "**Total programs in database:** $total_programs\n" >> LIST_LINUX.md
        echo "**Total pathes in database:** $total_pathes" >> LIST_LINUX.md
        
        jq -r 'map(.class) | unique | map(select(. != null)) | .[]' database/linux_database.json | while IFS= read -r class; do
          echo -e "## $class\n" >> LIST_LINUX.md
          
          # Get programs for this class
          programs=$(jq -c --arg class "$class" 'group_by(.program)[] | select(.[0].program != null and .[0].class == $class)' database/linux_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_LINUX.md
            echo "| --- | --- | --- |" >> LIST_LINUX.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $program | $categories |" >> LIST_LINUX.md
            done <<< "$programs"
          else
            echo "*No programs found for this class*" >> LIST_LINUX.md
          fi
          
          echo -e "\n" >> LIST_LINUX.md
        done

        # Handle null class separately if needed
        if jq -e '.[] | select(.class == null)' database/linux_database.json >/dev/null; then
          echo -e "## Uncategorized\n" >> LIST_LINUX.md
          programs=$(jq -c 'group_by(.program)[] | select(.[0].program != null and .[0].class == null)' database/linux_database.json)
          
          if [ -n "$programs" ]; then
            echo "| № | Program | Categories |" >> LIST_LINUX.md
            echo "| --- | --- | --- |" >> LIST_LINUX.md
            
            i=0
            while IFS= read -r line; do
              program=$(echo "$line" | jq -r '.[0].program')
              categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
              echo "| $((++i)) | $program | $categories |" >> LIST_LINUX.md
            done <<< "$programs"
          else
            echo "*No uncategorized programs found*" >> LIST_LINUX.md
          fi
        fi

          

    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add LIST_*.md
        git pull || echo "No pull"
        git commit -m "Auto-updated program catalogs" || echo "No changes to commit"
        git push || echo "No changes to push"

  upload_databases:
    needs: [sort_json]
    runs-on: ubuntu-latest
    name: Archive databases
    permissions: write-all

    steps:
    - uses: actions/checkout@v4
    - name: Move databases
      run: |
        mv database/linux_database.json linux_database.json
        mv database/windows_database.json windows_database.json
    - name: Upload databases to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: databases
        path: |
          linux_database.json
          windows_database.json

  build_linux:
    runs-on: ubuntu-latest
    needs: [sort_json]
    permissions: write-all
    name: Build Linux
    steps:
    - uses: actions/checkout@v4
    - name: Build linux
      run: cargo build --release
    - name: Move linux binaries
      run: |
        mv target/release/Cross_Cleaner_CLI Cross_Cleaner_CLI
        mv target/release/Cross_Cleaner_GUI Cross_Cleaner_GUI
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          Cross_Cleaner_CLI
          Cross_Cleaner_GUI

  build_windows:
    runs-on: windows-latest
    needs: [sort_json]
    permissions: write-all
    name: Build Windows
    steps:
    - uses: actions/checkout@v4
    - name: Build windows
      run: cargo build --release
    - name: Move windows binaries
      run: |
        move target\release\Cross_Cleaner_CLI.exe Cross_Cleaner_CLI.exe
        move target\release\Cross_Cleaner_GUI.exe Cross_Cleaner_GUI.exe
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          Cross_Cleaner_CLI.exe
          Cross_Cleaner_GUI.exe