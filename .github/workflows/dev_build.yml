name: Rust compile and release

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.toml'
      - '**/*.rs'
      - '**/*.json'
      - '.github/workflows/**' 

env:
  CARGO_TERM_COLOR: always
  APP_VERSION: "2.0.1"

jobs:
  formating_code:
    runs-on: ubuntu-latest
    permissions: write-all
    name: Formating code
    steps:
    - uses: actions/checkout@v4
    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = .*/version = "${{ env.APP_VERSION }}"/' Cargo.toml
        sed -i 's/ProductVersion = .*/ProductVersion = "${{ env.APP_VERSION }}"/' Cargo.toml
    - name: Formating code
      run: cargo fmt
    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "Auto format code" || echo "No changes to commit"
        git push || echo "No changes to push"

  sort_json:
    runs-on: ubuntu-latest
    name: Sorting json
    permissions: write-all
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Sort JSON files by program field
      run: |
        # Установка jq (если не установлен)
        sudo apt-get -y install jq
        
        # Массив файлов для сортировки
        JSON_FILES=("database/linux_database.json" "database/windows_database.json")
        for JSON_FILE in "${JSON_FILES[@]}"; do
          echo "Processing $JSON_FILE..."
          
          # Проверяем, существует ли файл
          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: JSON file not found at $JSON_FILE"
            exit 1
          fi
          
          # Сортируем JSON по полю program и сохраняем во временный файл
          jq 'sort_by(.program | ascii_downcase)' "$JSON_FILE" > "${JSON_FILE}.tmp"
          
          # Проверяем успешность сортировки
          if [ $? -eq 0 ]; then
            # Заменяем исходный файл отсортированным
            mv "${JSON_FILE}.tmp" "$JSON_FILE"
            echo "Successfully sorted $JSON_FILE"
          else
            echo "Error: Failed to sort $JSON_FILE"
            exit 1
          fi
        done
        
        # Коммитим изменения (если файлы изменились)
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add "${JSON_FILES[@]}"
        git commit -m "Auto-sorted JSON files by program field" || echo "No changes to commit"
        git push || echo "No changes to push"

  generate-lists:
    runs-on: ubuntu-latest
    name: Generating clearing programs list
    needs: [sort_json]
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get -y install jq

    - name: Process Windows data
      run: |
        # Header
        echo "# Windows Clearing Programs Catalog" > LIST_WINDOWS.md
        echo "**Last updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> LIST_WINDOWS.md
        
        # Categories table with better formatting
        echo "| № | Program | Categories |" >> LIST_WINDOWS.md
        echo "|---|---------|------------|" >> LIST_WINDOWS.md
        i=0
        while IFS= read -r line; do
          program=$(echo "$line" | jq -r '.[0].program')
          categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
          echo "| $((++i)) | $program | $categories |" >> LIST_WINDOWS.md
        done < <(jq -c 'group_by(.program)[] | select(.[0].program != null)' database/windows_database.json)

    - name: Process Linux data
      run: |
        # Header
        echo "# Linux Clearing Programs Catalog" > LIST_LINUX.md
        echo "**Last updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> LIST_LINUX.md
        
        # Categories table with better formatting
        echo "| № | Program | Categories |" >> LIST_LINUX.md
        echo "|---|---------|------------|" >> LIST_LINUX.md
        i=0
        while IFS= read -r line; do
          program=$(echo "$line" | jq -r '.[0].program')
          categories=$(echo "$line" | jq -r 'map(.category) | unique | join(", ")')
          echo "| $((++i)) | $program | $categories |" >> LIST_LINUX.md
        done < <(jq -c 'group_by(.program)[] | select(.[0].program != null)' database/linux_database.json)
          

    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add LIST_*.md
        if ! git diff --quiet --staged; then
          git commit -m "Auto-updated program catalogs"
          git push
        fi 

  upload_databases:
    needs: [sort_json]
    runs-on: ubuntu-latest
    name: Archive databases
    permissions: write-all

    steps:
    - uses: actions/checkout@v4
    - name: Move databases
      run: |
        mv database/linux_database.json linux_database.json
        mv database/windows_database.json windows_database.json
    - name: Upload databases to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: databases
        path: |
          linux_database.json
          windows_database.json

  build_linux:
    runs-on: ubuntu-latest
    needs: [sort_json]
    permissions: write-all
    name: Build Linux
    steps:
    - uses: actions/checkout@v4
    - name: Build linux
      run: cargo build --release
    - name: Move linux binaries
      run: |
        mv target/release/Cross_Cleaner_CLI Cross_Cleaner_CLI
        mv target/release/Cross_Cleaner_GUI Cross_Cleaner_GUI
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          Cross_Cleaner_CLI
          Cross_Cleaner_GUI

  build_windows:
    runs-on: windows-latest
    needs: [sort_json]
    permissions: write-all
    name: Build Windows
    steps:
    - uses: actions/checkout@v4
    - name: Build windows
      run: cargo build --release
    - name: Move windows binaries
      run: |
        move target\release\Cross_Cleaner_CLI.exe Cross_Cleaner_CLI.exe
        move target\release\Cross_Cleaner_GUI.exe Cross_Cleaner_GUI.exe
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          Cross_Cleaner_CLI.exe
          Cross_Cleaner_GUI.exe

  create_release:
    needs: [build_linux, build_windows]
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-binaries
        path: linux-binaries
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries
        path: windows-binaries
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.APP_VERSION }}
        name: 🌟 Cross Cleaner ${{ env.APP_VERSION }} 🌟
        body: |
          ![Downloads](https://img.shields.io/github/downloads/WinBooster/Cross-Cleaner/v${{ env.APP_VERSION }}/total) ![Version](https://img.shields.io/badge/version-${{ env.APP_VERSION }}-blue) ![Platform](https://img.shields.io/badge/platform-Windows%20|%20Linux-orange)

          ## ✨ What's New

          

          ## 👏 Contributors Hall of Fame
          Special thanks to our amazing contributors who made this release possible:
          - **@Nekiplay** - Core improvements and feature implementations

          ---
          *Thank you for using Cross Cleaner! Your system, cleaner than ever.*
        files: |
          linux-binaries/Cross_Cleaner_CLI
          linux-binaries/Cross_Cleaner_GUI
          windows-binaries/Cross_Cleaner_CLI.exe
          windows-binaries/Cross_Cleaner_GUI.exe
